{"version":3,"sources":["App.js","index.js"],"names":["api","currentUnit","currentTemp","App","useState","weather","setWeather","query","setQuery","units","setUnits","useEffect","pos","a","crd","coords","latitude","longitude","fetch","then","res","json","result","main","temp","navigator","geolocation","getCurrentPosition","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","className","rain","snow","type","placeholder","onChange","e","target","value","onKeyPress","event","key","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","onClick","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAGMA,G,MACC,oCADDA,EAEE,2CAQJC,EAAc,SACdC,EAAc,EA2HHC,MAzHf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGaJ,mBAAS,UAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAwFb,OAnFAC,qBAAU,WAAM,4CAOd,WAAuBC,GAAvB,mBAAAC,EAAA,6DACMC,EAAMF,EAAIG,OACRC,EAAWF,EAAIE,SACfC,EAAYH,EAAIG,UAHxB,SAKQC,MAAM,GAAD,OAAIlB,EAAJ,uBAA2BgB,EAA3B,gBAA2CC,EAA3C,kBAA8DR,EAA9D,kBAA6ET,IACrFmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJrB,EAAcQ,EACdP,EAAcoB,EAAOC,KAAKC,KAC1BlB,EAAWgB,MAVjB,4CAPc,sBAyBdG,UAAUC,YAAYC,oBAzBR,8CAqBd,SAAeC,GACbC,QAAQC,KAAR,gBAAsBF,EAAIG,KAA1B,cAAoCH,EAAII,YArB5B,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAsBb,CAAC1B,IA0DF,yBAAK2B,UAAkC,oBAAhB/B,EAAQkB,KA5BX,WAAhBtB,EACEI,EAAQgC,KACH,WACEhC,EAAQiC,KACV,WACEjC,EAAQkB,KAAKC,MAAQ,EACzB,WACEnB,EAAQkB,KAAKC,MAAQ,GACvB,UAEA,MAGLnB,EAAQgC,KACH,WACEhC,EAAQiC,KACV,WACEjC,EAAQkB,KAAKC,MAAQ,GACvB,WACEnB,EAAQkB,KAAKC,MAAQ,GACvB,UAEA,MAMiE,OACxE,yBAAKY,UAAU,aACb,yBAAKA,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIlC,EAASkC,EAAEC,OAAOC,QACjCA,MAAOrC,EACPsC,WA/DK,SAAAC,GACK,UAAdA,EAAMC,KACR7B,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBO,EAAzB,kBAAwCE,EAAxC,kBAAuDT,IACzDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJpB,EAAcoB,EAAOC,KAAKC,KAC1BlB,EAAWgB,GACXd,EAAS,WA4Dc,oBAAhBH,EAAQkB,KACjB,6BACE,yBAAKa,UAAU,gBACb,yBAAKA,UAAU,YAAY/B,EAAQ2C,KAAnC,KAA2C3C,EAAQ4C,IAAIC,SACvD,yBAAKd,UAAU,QA3DL,SAACe,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAKlBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBI,EAAjB,YAA0BF,EAA1B,YAAkCI,GAiDHE,CAAY,IAAIC,QAGzC,yBAAKzB,UAAU,cAAc0B,QAAS,kBAA2BpD,EAAX,WAAVD,EAA8B,WAAuB,YAC/F,uBAAG2B,UAAU,QAAb,oCACA,yBAAKA,UAAU,QAAQ2B,KAAKC,MAAM9D,GAAwB,aAAVO,EAAuB,QAAO,SAC9E,yBAAK2B,UAAU,WAAW/B,EAAQA,QAAQ,GAAGkB,QAG5C,MC/Hb0C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.729a0dda.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst api = {\n  key: \"6c737e5151227aae2ecd31335b3c5ad7\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n/* The reason I put this here is because of an async issue, everytime I changed the \"units\" STATE with setUnit,\nthe background updated too early, before we were able to fetch the new temperature info. So basically what happens\nis when you click 15 Celsius, it changess to 15 Fahrenheit instead of converting the temperature first.\nSo it would show a cold temperature background, which is wrong. To fix this, I'm adding an outside variable\nto control the current unit, this variable will be changed/updated AFTER successfully fetching the updated info.*/\nlet currentUnit = \"metric\";\nlet currentTemp = 0;\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n  const [query, setQuery] = useState('');\n  const [units, setUnits] = useState('metric');\n  \n  useEffect(() => {\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n    \n    async function success(pos) {\n      var crd = pos.coords;\n      const latitude = crd.latitude;\n      const longitude = crd.longitude;\n\n      await fetch(`${api.base}weather?lat=${latitude}&lon=${longitude}&units=${units}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          currentUnit = units;\n          currentTemp = result.main.temp;\n          setWeather(result);\n      });\n    }\n    \n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n    \n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }, [units]);\n    \n\n\n  const search = event => {\n    if (event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=${units}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          currentTemp = result.main.temp;\n          setWeather(result);\n          setQuery('');\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n                  \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${month} ${date} ${year}`\n  }\n\n  const handleBackground = () => {\n    if (currentUnit === \"metric\") {\n      if (weather.rain) {\n        return \"App rain\"\n      } else if (weather.snow) {\n        return \"App snow\";\n      } else if (weather.main.temp <= 5) {\n      return \"App cold\";\n    } else if (weather.main.temp >= 24)  {\n      return \"App hot\";\n    } else {\n      return \"App\";\n    }\n  } else {\n    if (weather.rain) {\n      return \"App rain\";\n    } else if (weather.snow) {\n      return \"App snow\";\n    } else if (weather.main.temp <= 41) {\n      return \"App cold\";\n    } else if (weather.main.temp >= 75)  {\n      return \"App hot\";\n    } else {\n      return \"App\";\n    }\n  }\n}\n\n  return (\n    <div className={typeof weather.main != \"undefined\" ? handleBackground() : \"App\"}>\n      <div className=\"main-area\">\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n\n          <div className=\"weather-box\" onClick={() => units === \"metric\" ? setUnits(\"imperial\") : setUnits(\"metric\")}>\n            <p className=\"info\">Click anywhere to change metrics</p>\n            <div className=\"temp\">{Math.round(currentTemp)}{units === \"imperial\" ? \"°F\" : \"°C\"}</div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}