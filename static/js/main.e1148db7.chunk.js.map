{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","weather","setWeather","query","setQuery","units","setUnits","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","fetch","then","res","json","result","console","log","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","className","main","rain","snow","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","onClick","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAGMA,G,KACC,oCADDA,EAEE,2CA0HOC,MAvHf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGaJ,mBAAS,UAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAsFb,OAjFAC,qBAAU,WAwBRC,UAAUC,YAAYC,oBAjBtB,SAAiBC,GACf,IAAIC,EAAMD,EAAIE,OACRC,EAAWF,EAAIE,SACfC,EAAYH,EAAIG,UAEtBC,MAAM,GAAD,OAAIlB,EAAJ,uBAA2BgB,EAA3B,gBAA2CC,EAA3C,kBAA8DV,EAA9D,kBAA6EP,IAC/EmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJlB,EAAWkB,GACXC,QAAQC,IAAIF,SAIlB,SAAeG,GACbF,QAAQG,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIG,YApB5B,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAqBb,CAACxB,IAyDF,yBAAKyB,UAAkC,oBAAhB7B,EAAQ8B,KA5BjB,WAAV1B,EACEJ,EAAQ+B,KACH,WACE/B,EAAQgC,KACV,WACEhC,EAAQ8B,KAAKG,KAAO,GACxB,WACEjC,EAAQ8B,KAAKG,MAAQ,GACvB,UAEA,MAGLjC,EAAQ+B,KACH,WACE/B,EAAQgC,KACV,WACEhC,EAAQ8B,KAAKG,KAAO,GACtB,WACEjC,EAAQ8B,KAAKG,MAAQ,GACvB,UAEA,MAMiE,OACxE,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,cACb,2BACEK,KAAK,OACLL,UAAU,aACVM,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIlC,EAASkC,EAAEC,OAAOC,QACjCA,MAAOrC,EACPsC,WA9DK,SAAAC,GACK,UAAdA,EAAMC,KACR3B,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBK,EAAzB,+BAAqDL,IACvDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJlB,EAAWkB,GACXhB,EAAS,WA4Dc,oBAAhBH,EAAQ8B,KACjB,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YAAY7B,EAAQ2C,KAAnC,KAA2C3C,EAAQ4C,IAAIC,SACvD,yBAAKhB,UAAU,QA3DL,SAACiB,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAKlBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBI,EAAjB,YAA0BF,EAA1B,YAAkCI,GAiDHE,CAAY,IAAIC,QAGzC,yBAAK3B,UAAU,cAAc4B,QAAS,kBAA2BpD,EAAX,WAAVD,EAA8B,WAAuB,YAC/F,uBAAGyB,UAAU,QAAb,oCACA,yBAAKA,UAAU,QAAQ6B,KAAKC,MAAM3D,EAAQ8B,KAAKG,MAAiB,aAAV7B,EAAuB,QAAO,SACpF,yBAAKyB,UAAU,WAAW7B,EAAQA,QAAQ,GAAG8B,QAG5C,MCrHb8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.e1148db7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst api = {\n  key: \"6c737e5151227aae2ecd31335b3c5ad7\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n  const [query, setQuery] = useState('');\n  const [units, setUnits] = useState('metric');\n\n  useEffect(() => {\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n    \n    function success(pos) {\n      var crd = pos.coords;\n      const latitude = crd.latitude;\n      const longitude = crd.longitude;\n\n      fetch(`${api.base}weather?lat=${latitude}&lon=${longitude}&units=${units}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          console.log(result) \n      });\n    }\n    \n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n    \n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }, [units]);\n    \n\n\n  const search = event => {\n    if (event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n                  \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${month} ${date} ${year}`\n  }\n\n  const handleBackground = () => {\n    if (units === \"metric\") {\n      if (weather.rain) {\n        return \"App rain\"\n      } else if (weather.snow) {\n        return \"App snow\";\n      } else if (weather.main.temp < 16) {\n      return \"App cold\";\n    } else if (weather.main.temp >= 27)  {\n      return \"App hot\";\n    } else {\n      return \"App\";\n    }\n  } else {\n    if (weather.rain) {\n      return \"App rain\";\n    } else if (weather.snow) {\n      return \"App snow\";\n    } else if (weather.main.temp < 30) {\n      return \"App cold\";\n    } else if (weather.main.temp >= 75)  {\n      return \"App hot\";\n    } else {\n      return \"App\";\n    }\n  }\n}\n\n  return (\n    <div className={typeof weather.main != \"undefined\" ? handleBackground() : \"App\"}>\n      <div className=\"main-area\">\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n\n          <div className=\"weather-box\" onClick={() => units === \"metric\" ? setUnits(\"imperial\") : setUnits(\"metric\")}>\n            <p className=\"info\">Click anywhere to change metrics</p>\n            <div className=\"temp\">{Math.round(weather.main.temp)}{units === \"imperial\" ? \"°F\" : \"°c\"}</div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}